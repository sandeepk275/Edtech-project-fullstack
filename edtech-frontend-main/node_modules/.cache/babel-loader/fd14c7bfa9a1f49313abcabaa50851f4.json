{"ast":null,"code":"import * as utils from \"../../../utils\";\n\nconst validateCheckoutForm = values => {\n  let errors = {};\n  /*\n   Rule 1: flat / building no. is required\n   */\n\n  if (!values.flatOrBuilding.trim()) {\n    errors.flatOrBuilding = \"Required\";\n  }\n  /*\n   Rule 2: street is required\n   */\n\n\n  if (!values.street.trim()) {\n    errors.street = \"Required\";\n  }\n  /*\n   Rule 3: city is required\n   */\n\n\n  if (!values.city.trim()) {\n    errors.city = \"Required\";\n  }\n  /*\n   Rule 4: state is required\n   */\n\n\n  if (!values.state.trim()) {\n    errors.state = \"Required\";\n  }\n  /*\n   Rule 4: country is required\n   */\n\n\n  if (!values.country.trim()) {\n    errors.country = \"Required\";\n  }\n  /*\n   Rule 5: pin code is required\n   Rule 6: pin is numerical\n   Rule 7: pin should have exactly 6 numbers long\n   */\n\n\n  if (!values.pin.trim()) {\n    errors.pin = \"Required\";\n  } else if (!utils.checkIfValueIsInteger(values.pin)) {\n    errors.pin = \"Pin should contain only digits\";\n  } else if (values.pin.length !== utils.constants.PIN_CODE_LEN) {\n    errors.pin = `Pin should be exactly ${utils.constants.PIN_CODE_LEN} digits long`;\n  }\n  /*\n   Rule 8: phone number is required\n   Rule 9: phone number is numerical\n   Rule 10: phone number is exactly 10 numbers long\n   */\n\n\n  if (!values.phone) {\n    errors.phone = \"Required\";\n  } else if (!utils.checkIfValueIsInteger(values.phone)) {\n    errors.phone = \"Phone number should contain only digits\";\n  } else if (values.phone.length !== utils.constants.PHONE_NUMBER_LEN) {\n    errors.phone = `Phone number should be exactly ${utils.constants.PHONE_NUMBER_LEN} digits long`;\n  }\n\n  return errors;\n};\n\nexport default validateCheckoutForm;","map":{"version":3,"sources":["C:/Users/sandeep/Downloads/edtech-frontend-main/edtech-frontend-main/src/pages/user/checkout/validateCheckoutForm.js"],"names":["utils","validateCheckoutForm","values","errors","flatOrBuilding","trim","street","city","state","country","pin","checkIfValueIsInteger","length","constants","PIN_CODE_LEN","phone","PHONE_NUMBER_LEN"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,gBAAvB;;AAEA,MAAMC,oBAAoB,GAAIC,MAAD,IAAY;AACvC,MAAIC,MAAM,GAAG,EAAb;AAEA;AACF;AACA;;AACE,MAAI,CAACD,MAAM,CAACE,cAAP,CAAsBC,IAAtB,EAAL,EAAmC;AACjCF,IAAAA,MAAM,CAACC,cAAP,GAAwB,UAAxB;AACD;AAED;AACF;AACA;;;AACE,MAAI,CAACF,MAAM,CAACI,MAAP,CAAcD,IAAd,EAAL,EAA2B;AACzBF,IAAAA,MAAM,CAACG,MAAP,GAAgB,UAAhB;AACD;AAED;AACF;AACA;;;AACE,MAAI,CAACJ,MAAM,CAACK,IAAP,CAAYF,IAAZ,EAAL,EAAyB;AACvBF,IAAAA,MAAM,CAACI,IAAP,GAAc,UAAd;AACD;AAED;AACF;AACA;;;AACE,MAAI,CAACL,MAAM,CAACM,KAAP,CAAaH,IAAb,EAAL,EAA0B;AACxBF,IAAAA,MAAM,CAACK,KAAP,GAAe,UAAf;AACD;AAED;AACF;AACA;;;AACE,MAAI,CAACN,MAAM,CAACO,OAAP,CAAeJ,IAAf,EAAL,EAA4B;AAC1BF,IAAAA,MAAM,CAACM,OAAP,GAAiB,UAAjB;AACD;AAED;AACF;AACA;AACA;AACA;;;AACE,MAAI,CAACP,MAAM,CAACQ,GAAP,CAAWL,IAAX,EAAL,EAAwB;AACtBF,IAAAA,MAAM,CAACO,GAAP,GAAa,UAAb;AACD,GAFD,MAEO,IAAI,CAACV,KAAK,CAACW,qBAAN,CAA4BT,MAAM,CAACQ,GAAnC,CAAL,EAA8C;AACnDP,IAAAA,MAAM,CAACO,GAAP,GAAa,gCAAb;AACD,GAFM,MAEA,IAAIR,MAAM,CAACQ,GAAP,CAAWE,MAAX,KAAsBZ,KAAK,CAACa,SAAN,CAAgBC,YAA1C,EAAwD;AAC7DX,IAAAA,MAAM,CAACO,GAAP,GAAc,yBAAwBV,KAAK,CAACa,SAAN,CAAgBC,YAAa,cAAnE;AACD;AAED;AACF;AACA;AACA;AACA;;;AACE,MAAI,CAACZ,MAAM,CAACa,KAAZ,EAAmB;AACjBZ,IAAAA,MAAM,CAACY,KAAP,GAAe,UAAf;AACD,GAFD,MAEO,IAAI,CAACf,KAAK,CAACW,qBAAN,CAA4BT,MAAM,CAACa,KAAnC,CAAL,EAAgD;AACrDZ,IAAAA,MAAM,CAACY,KAAP,GAAe,yCAAf;AACD,GAFM,MAEA,IAAIb,MAAM,CAACa,KAAP,CAAaH,MAAb,KAAwBZ,KAAK,CAACa,SAAN,CAAgBG,gBAA5C,EAA8D;AACnEb,IAAAA,MAAM,CAACY,KAAP,GAAgB,kCAAiCf,KAAK,CAACa,SAAN,CAAgBG,gBAAiB,cAAlF;AACD;;AAED,SAAOb,MAAP;AACD,CAjED;;AAmEA,eAAeF,oBAAf","sourcesContent":["import * as utils from \"../../../utils\";\n\nconst validateCheckoutForm = (values) => {\n  let errors = {};\n\n  /*\n   Rule 1: flat / building no. is required\n   */\n  if (!values.flatOrBuilding.trim()) {\n    errors.flatOrBuilding = \"Required\";\n  }\n\n  /*\n   Rule 2: street is required\n   */\n  if (!values.street.trim()) {\n    errors.street = \"Required\";\n  }\n\n  /*\n   Rule 3: city is required\n   */\n  if (!values.city.trim()) {\n    errors.city = \"Required\";\n  }\n\n  /*\n   Rule 4: state is required\n   */\n  if (!values.state.trim()) {\n    errors.state = \"Required\";\n  }\n\n  /*\n   Rule 4: country is required\n   */\n  if (!values.country.trim()) {\n    errors.country = \"Required\";\n  }\n\n  /*\n   Rule 5: pin code is required\n   Rule 6: pin is numerical\n   Rule 7: pin should have exactly 6 numbers long\n   */\n  if (!values.pin.trim()) {\n    errors.pin = \"Required\";\n  } else if (!utils.checkIfValueIsInteger(values.pin)) {\n    errors.pin = \"Pin should contain only digits\";\n  } else if (values.pin.length !== utils.constants.PIN_CODE_LEN) {\n    errors.pin = `Pin should be exactly ${utils.constants.PIN_CODE_LEN} digits long`;\n  }\n\n  /*\n   Rule 8: phone number is required\n   Rule 9: phone number is numerical\n   Rule 10: phone number is exactly 10 numbers long\n   */\n  if (!values.phone) {\n    errors.phone = \"Required\";\n  } else if (!utils.checkIfValueIsInteger(values.phone)) {\n    errors.phone = \"Phone number should contain only digits\";\n  } else if (values.phone.length !== utils.constants.PHONE_NUMBER_LEN) {\n    errors.phone = `Phone number should be exactly ${utils.constants.PHONE_NUMBER_LEN} digits long`;\n  }\n\n  return errors;\n};\n\nexport default validateCheckoutForm;\n"]},"metadata":{},"sourceType":"module"}