{"ast":null,"code":"// imports for utils\nimport { utilsApi, apiConstants } from \"./utils-api\"; // imports for utils\n\nimport * as utils from \"../utils\";\n/**\n * Function to search for a course\n * @param {String} title - substring which needs to be searched in course title\n * @param {Function} successCallback - callback method to be called when API succeeds\n * @param {Function} failureCallback - callback method to be called when API fails\n * @returns {Array} array of courses whose title contains the given substring (each course is an object consisting of course details)\n */\n\nexport async function searchCourseByTitle(title, successCallback, failureCallback) {\n  try {\n    await utilsApi.sendApiRequest(apiConstants.HTTP_METHOD.GET, apiConstants.COURSES_API_ROUTE.TUTORIALS, apiConstants.COURSES_API_ROUTE.TUTORIALSBYTITLE, // null,\n    {\n      title: title\n    }, null, null, successCallback, failureCallback);\n  } catch (error) {\n    if (failureCallback) {\n      failureCallback(error);\n    }\n  }\n}\n/**\n * Function to get all courses within a given category\n * @param {String} category - category string corresponding to which courses are to be fetched\n * @param {Function} successCallback - callback method to be called when API succeeds\n * @param {Function} failureCallback - callback method to be called when API fails\n * @returns {Array} array of courses which belong to the given category (each course is an object consisting of course details)\n */\n\nexport async function getCoursesByCategory(category, successCallback, failureCallback) {\n  try {\n    await utilsApi.sendApiRequest(apiConstants.HTTP_METHOD.GET, apiConstants.COURSES_API_ROUTE.GET_CATEGORY, [category], null, null, null, successCallback, failureCallback);\n  } catch (error) {\n    if (failureCallback) {\n      failureCallback(error);\n    }\n  }\n}\n/**\n * Function to get all courses (published as well as non-published)\n * @param {Function} successCallback - callback method to be called when API succeeds\n * @param {Function} failureCallback - callback method to be called when API fails\n * @returns {Array} array of all courses in the database (each course is an object consisting of course details)\n */\n\nexport async function getAllCourses(successCallback, failureCallback) {\n  try {\n    await utilsApi.sendApiRequest(apiConstants.HTTP_METHOD.GET, apiConstants.COURSES_API_ROUTE.TUTORIALS, null, null, null, null, successCallback, failureCallback);\n  } catch (error) {\n    if (failureCallback) {\n      failureCallback(error);\n    }\n  }\n}\n/**\n * Function to get all published courses\n * @param {Function} successCallback - callback method to be called when API succeeds\n * @param {Function} failureCallback - callback method to be called when API fails\n * @returns {Array} array of all published courses in the database (each course is an object consisting of course details)\n */\n\nexport async function getAllPublishedCourses(successCallback, failureCallback) {\n  try {\n    await utilsApi.sendApiRequest(apiConstants.HTTP_METHOD.GET, apiConstants.COURSES_API_ROUTE.TUTORIALS, [apiConstants.COURSES_API_PATH_PARAMETER.PUBLISHED], null, null, null, successCallback, failureCallback);\n  } catch (error) {\n    if (failureCallback) {\n      failureCallback(error);\n    }\n  }\n}\n/**\n * Function to get course with given id\n * @param {*} courseId - id of the course to be fetched\n * @param {*} successCallback - callback method to be called when API succeeds\n * @param {*} failureCallback - callback method to be called when API fails\n * @returns {Object} course with given ID\n */\n\nexport async function getCourseById(courseId, successCallback, failureCallback) {\n  try {\n    await utilsApi.sendApiRequest(apiConstants.HTTP_METHOD.GET, apiConstants.COURSES_API_ROUTE.TUTORIALS, [courseId], null, null, null, successCallback, failureCallback);\n  } catch (error) {\n    if (failureCallback) {\n      failureCallback(error);\n    }\n  }\n}\n/**\n * Function to delete a course with given id\n * @param {*} courseId - id of the course to be deleted\n * @param {*} successCallback - callback method to be called when API succeeds\n * @param {*} failureCallback - callback method to be called when API fails\n */\n\nexport async function deleteCourse(courseId, successCallback, failureCallback) {\n  try {\n    await utilsApi.sendApiRequest(apiConstants.HTTP_METHOD.DELETE, apiConstants.COURSES_API_ROUTE.TUTORIALS, [courseId], null, null, null, successCallback, failureCallback);\n  } catch (error) {\n    if (failureCallback) {\n      failureCallback(error);\n    }\n  }\n}\nexport async function addCourse(courseData, successCallback, failureCallback) {\n  try {\n    await utilsApi.sendApiRequest(apiConstants.HTTP_METHOD.POST, apiConstants.COURSES_API_ROUTE.ADD_COURSE, null, null, courseData, null, successCallback, failureCallback);\n  } catch (error) {\n    if (failureCallback) {\n      failureCallback(error);\n    }\n  }\n}\nexport async function editCourse(courseId, courseData, successCallback, failureCallback) {\n  try {\n    await utilsApi.sendApiRequest(apiConstants.HTTP_METHOD.PUT, apiConstants.COURSES_API_ROUTE.TUTORIALS, [courseId], null, courseData, null, successCallback, failureCallback);\n  } catch (error) {\n    if (failureCallback) {\n      failureCallback(error);\n    }\n  }\n}\nexport async function getAllCategory(successCallback, failureCallback) {\n  try {\n    await utilsApi.sendApiRequest(apiConstants.HTTP_METHOD.GET, apiConstants.COURSES_API_ROUTE.GET_CATEGORY, null, null, null, null, successCallback, failureCallback);\n  } catch (error) {\n    if (failureCallback) {\n      failureCallback(error);\n    }\n  }\n}","map":{"version":3,"sources":["C:/Users/sandeep/Downloads/edtech-frontend-main/edtech-frontend-main/src/api/coursesApi.js"],"names":["utilsApi","apiConstants","utils","searchCourseByTitle","title","successCallback","failureCallback","sendApiRequest","HTTP_METHOD","GET","COURSES_API_ROUTE","TUTORIALS","TUTORIALSBYTITLE","error","getCoursesByCategory","category","GET_CATEGORY","getAllCourses","getAllPublishedCourses","COURSES_API_PATH_PARAMETER","PUBLISHED","getCourseById","courseId","deleteCourse","DELETE","addCourse","courseData","POST","ADD_COURSE","editCourse","PUT","getAllCategory"],"mappings":"AAAA;AACA,SAASA,QAAT,EAAmBC,YAAnB,QAAuC,aAAvC,C,CACA;;AACA,OAAO,KAAKC,KAAZ,MAAuB,UAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,eAAeC,mBAAf,CACLC,KADK,EAELC,eAFK,EAGLC,eAHK,EAIL;AACA,MAAI;AACF,UAAMN,QAAQ,CAACO,cAAT,CACJN,YAAY,CAACO,WAAb,CAAyBC,GADrB,EAEJR,YAAY,CAACS,iBAAb,CAA+BC,SAF3B,EAGJV,YAAY,CAACS,iBAAb,CAA+BE,gBAH3B,EAIJ;AACA;AAAER,MAAAA,KAAK,EAAEA;AAAT,KALI,EAMJ,IANI,EAOJ,IAPI,EAQJC,eARI,EASJC,eATI,CAAN;AAWD,GAZD,CAYE,OAAOO,KAAP,EAAc;AACd,QAAIP,eAAJ,EAAqB;AACnBA,MAAAA,eAAe,CAACO,KAAD,CAAf;AACD;AACF;AACF;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,eAAeC,oBAAf,CACLC,QADK,EAELV,eAFK,EAGLC,eAHK,EAIL;AACA,MAAI;AACF,UAAMN,QAAQ,CAACO,cAAT,CACJN,YAAY,CAACO,WAAb,CAAyBC,GADrB,EAEJR,YAAY,CAACS,iBAAb,CAA+BM,YAF3B,EAGJ,CAACD,QAAD,CAHI,EAIJ,IAJI,EAKJ,IALI,EAMJ,IANI,EAOJV,eAPI,EAQJC,eARI,CAAN;AAUD,GAXD,CAWE,OAAOO,KAAP,EAAc;AACd,QAAIP,eAAJ,EAAqB;AACnBA,MAAAA,eAAe,CAACO,KAAD,CAAf;AACD;AACF;AACF;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,eAAeI,aAAf,CAA6BZ,eAA7B,EAA8CC,eAA9C,EAA+D;AACpE,MAAI;AACF,UAAMN,QAAQ,CAACO,cAAT,CACJN,YAAY,CAACO,WAAb,CAAyBC,GADrB,EAEJR,YAAY,CAACS,iBAAb,CAA+BC,SAF3B,EAGJ,IAHI,EAIJ,IAJI,EAKJ,IALI,EAMJ,IANI,EAOJN,eAPI,EAQJC,eARI,CAAN;AAUD,GAXD,CAWE,OAAOO,KAAP,EAAc;AACd,QAAIP,eAAJ,EAAqB;AACnBA,MAAAA,eAAe,CAACO,KAAD,CAAf;AACD;AACF;AACF;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,eAAeK,sBAAf,CAAsCb,eAAtC,EAAuDC,eAAvD,EAAwE;AAC7E,MAAI;AACF,UAAMN,QAAQ,CAACO,cAAT,CACJN,YAAY,CAACO,WAAb,CAAyBC,GADrB,EAEJR,YAAY,CAACS,iBAAb,CAA+BC,SAF3B,EAGJ,CAACV,YAAY,CAACkB,0BAAb,CAAwCC,SAAzC,CAHI,EAIJ,IAJI,EAKJ,IALI,EAMJ,IANI,EAOJf,eAPI,EAQJC,eARI,CAAN;AAUD,GAXD,CAWE,OAAOO,KAAP,EAAc;AACd,QAAIP,eAAJ,EAAqB;AACnBA,MAAAA,eAAe,CAACO,KAAD,CAAf;AACD;AACF;AACF;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,eAAeQ,aAAf,CACLC,QADK,EAELjB,eAFK,EAGLC,eAHK,EAIL;AACA,MAAI;AACF,UAAMN,QAAQ,CAACO,cAAT,CACJN,YAAY,CAACO,WAAb,CAAyBC,GADrB,EAEJR,YAAY,CAACS,iBAAb,CAA+BC,SAF3B,EAGJ,CAACW,QAAD,CAHI,EAIJ,IAJI,EAKJ,IALI,EAMJ,IANI,EAOJjB,eAPI,EAQJC,eARI,CAAN;AAUD,GAXD,CAWE,OAAOO,KAAP,EAAc;AACd,QAAIP,eAAJ,EAAqB;AACnBA,MAAAA,eAAe,CAACO,KAAD,CAAf;AACD;AACF;AACF;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,eAAeU,YAAf,CAA4BD,QAA5B,EAAsCjB,eAAtC,EAAuDC,eAAvD,EAAwE;AAC7E,MAAI;AACF,UAAMN,QAAQ,CAACO,cAAT,CACJN,YAAY,CAACO,WAAb,CAAyBgB,MADrB,EAEJvB,YAAY,CAACS,iBAAb,CAA+BC,SAF3B,EAGJ,CAACW,QAAD,CAHI,EAIJ,IAJI,EAKJ,IALI,EAMJ,IANI,EAOJjB,eAPI,EAQJC,eARI,CAAN;AAUD,GAXD,CAWE,OAAOO,KAAP,EAAc;AACd,QAAIP,eAAJ,EAAqB;AACnBA,MAAAA,eAAe,CAACO,KAAD,CAAf;AACD;AACF;AACF;AAED,OAAO,eAAeY,SAAf,CAAyBC,UAAzB,EAAqCrB,eAArC,EAAsDC,eAAtD,EAAuE;AAC5E,MAAI;AACF,UAAMN,QAAQ,CAACO,cAAT,CACJN,YAAY,CAACO,WAAb,CAAyBmB,IADrB,EAEJ1B,YAAY,CAACS,iBAAb,CAA+BkB,UAF3B,EAGJ,IAHI,EAIJ,IAJI,EAKJF,UALI,EAMJ,IANI,EAOJrB,eAPI,EAQJC,eARI,CAAN;AAUD,GAXD,CAWE,OAAOO,KAAP,EAAc;AACd,QAAIP,eAAJ,EAAqB;AACnBA,MAAAA,eAAe,CAACO,KAAD,CAAf;AACD;AACF;AACF;AAED,OAAO,eAAegB,UAAf,CAA0BP,QAA1B,EAAoCI,UAApC,EAAgDrB,eAAhD,EAAiEC,eAAjE,EAAkF;AACvF,MAAI;AACF,UAAMN,QAAQ,CAACO,cAAT,CACJN,YAAY,CAACO,WAAb,CAAyBsB,GADrB,EAEJ7B,YAAY,CAACS,iBAAb,CAA+BC,SAF3B,EAGJ,CAACW,QAAD,CAHI,EAIJ,IAJI,EAKJI,UALI,EAMJ,IANI,EAOJrB,eAPI,EAQJC,eARI,CAAN;AAUD,GAXD,CAWE,OAAOO,KAAP,EAAc;AACd,QAAIP,eAAJ,EAAqB;AACnBA,MAAAA,eAAe,CAACO,KAAD,CAAf;AACD;AACF;AACF;AAED,OAAO,eAAekB,cAAf,CAA8B1B,eAA9B,EAA+CC,eAA/C,EAAgE;AACrE,MAAI;AACF,UAAMN,QAAQ,CAACO,cAAT,CACJN,YAAY,CAACO,WAAb,CAAyBC,GADrB,EAEJR,YAAY,CAACS,iBAAb,CAA+BM,YAF3B,EAGJ,IAHI,EAIJ,IAJI,EAKJ,IALI,EAMJ,IANI,EAOJX,eAPI,EAQJC,eARI,CAAN;AAUD,GAXD,CAWE,OAAOO,KAAP,EAAc;AACd,QAAIP,eAAJ,EAAqB;AACnBA,MAAAA,eAAe,CAACO,KAAD,CAAf;AACD;AACF;AACF","sourcesContent":["// imports for utils\nimport { utilsApi, apiConstants } from \"./utils-api\";\n// imports for utils\nimport * as utils from \"../utils\";\n\n/**\n * Function to search for a course\n * @param {String} title - substring which needs to be searched in course title\n * @param {Function} successCallback - callback method to be called when API succeeds\n * @param {Function} failureCallback - callback method to be called when API fails\n * @returns {Array} array of courses whose title contains the given substring (each course is an object consisting of course details)\n */\n\nexport async function searchCourseByTitle(\n  title,\n  successCallback,\n  failureCallback\n) {\n  try {\n    await utilsApi.sendApiRequest(\n      apiConstants.HTTP_METHOD.GET,\n      apiConstants.COURSES_API_ROUTE.TUTORIALS,\n      apiConstants.COURSES_API_ROUTE.TUTORIALSBYTITLE,\n      // null,\n      { title: title },\n      null,\n      null,\n      successCallback,\n      failureCallback\n    );\n  } catch (error) {\n    if (failureCallback) {\n      failureCallback(error);\n    }\n  }\n}\n\n/**\n * Function to get all courses within a given category\n * @param {String} category - category string corresponding to which courses are to be fetched\n * @param {Function} successCallback - callback method to be called when API succeeds\n * @param {Function} failureCallback - callback method to be called when API fails\n * @returns {Array} array of courses which belong to the given category (each course is an object consisting of course details)\n */\nexport async function getCoursesByCategory(\n  category,\n  successCallback,\n  failureCallback\n) {\n  try {\n    await utilsApi.sendApiRequest(\n      apiConstants.HTTP_METHOD.GET,\n      apiConstants.COURSES_API_ROUTE.GET_CATEGORY,\n      [category],\n      null,\n      null,\n      null,\n      successCallback,\n      failureCallback\n    );\n  } catch (error) {\n    if (failureCallback) {\n      failureCallback(error);\n    }\n  }\n}\n\n/**\n * Function to get all courses (published as well as non-published)\n * @param {Function} successCallback - callback method to be called when API succeeds\n * @param {Function} failureCallback - callback method to be called when API fails\n * @returns {Array} array of all courses in the database (each course is an object consisting of course details)\n */\nexport async function getAllCourses(successCallback, failureCallback) {\n  try {\n    await utilsApi.sendApiRequest(\n      apiConstants.HTTP_METHOD.GET,\n      apiConstants.COURSES_API_ROUTE.TUTORIALS,\n      null,\n      null,\n      null,\n      null,\n      successCallback,\n      failureCallback\n    );\n  } catch (error) {\n    if (failureCallback) {\n      failureCallback(error);\n    }\n  }\n}\n\n/**\n * Function to get all published courses\n * @param {Function} successCallback - callback method to be called when API succeeds\n * @param {Function} failureCallback - callback method to be called when API fails\n * @returns {Array} array of all published courses in the database (each course is an object consisting of course details)\n */\nexport async function getAllPublishedCourses(successCallback, failureCallback) {\n  try {\n    await utilsApi.sendApiRequest(\n      apiConstants.HTTP_METHOD.GET,\n      apiConstants.COURSES_API_ROUTE.TUTORIALS,\n      [apiConstants.COURSES_API_PATH_PARAMETER.PUBLISHED],\n      null,\n      null,\n      null,\n      successCallback,\n      failureCallback\n    );\n  } catch (error) {\n    if (failureCallback) {\n      failureCallback(error);\n    }\n  }\n}\n\n/**\n * Function to get course with given id\n * @param {*} courseId - id of the course to be fetched\n * @param {*} successCallback - callback method to be called when API succeeds\n * @param {*} failureCallback - callback method to be called when API fails\n * @returns {Object} course with given ID\n */\nexport async function getCourseById(\n  courseId,\n  successCallback,\n  failureCallback\n) {\n  try {\n    await utilsApi.sendApiRequest(\n      apiConstants.HTTP_METHOD.GET,\n      apiConstants.COURSES_API_ROUTE.TUTORIALS,\n      [courseId],\n      null,\n      null,\n      null,\n      successCallback,\n      failureCallback\n    );\n  } catch (error) {\n    if (failureCallback) {\n      failureCallback(error);\n    }\n  }\n}\n\n/**\n * Function to delete a course with given id\n * @param {*} courseId - id of the course to be deleted\n * @param {*} successCallback - callback method to be called when API succeeds\n * @param {*} failureCallback - callback method to be called when API fails\n */\nexport async function deleteCourse(courseId, successCallback, failureCallback) {\n  try {\n    await utilsApi.sendApiRequest(\n      apiConstants.HTTP_METHOD.DELETE,\n      apiConstants.COURSES_API_ROUTE.TUTORIALS,\n      [courseId],\n      null,\n      null,\n      null,\n      successCallback,\n      failureCallback\n    );\n  } catch (error) {\n    if (failureCallback) {\n      failureCallback(error);\n    }\n  }\n}\n\nexport async function addCourse(courseData, successCallback, failureCallback) {\n  try {\n    await utilsApi.sendApiRequest(\n      apiConstants.HTTP_METHOD.POST,\n      apiConstants.COURSES_API_ROUTE.ADD_COURSE,\n      null,\n      null,\n      courseData,\n      null,\n      successCallback,\n      failureCallback\n    );\n  } catch (error) {\n    if (failureCallback) {\n      failureCallback(error);\n    }\n  }\n}\n\nexport async function editCourse(courseId, courseData, successCallback, failureCallback) {\n  try {\n    await utilsApi.sendApiRequest(\n      apiConstants.HTTP_METHOD.PUT,\n      apiConstants.COURSES_API_ROUTE.TUTORIALS,\n      [courseId],\n      null,\n      courseData,\n      null,\n      successCallback,\n      failureCallback\n    );\n  } catch (error) {\n    if (failureCallback) {\n      failureCallback(error);\n    }\n  }\n}\n\nexport async function getAllCategory(successCallback, failureCallback) {\n  try {\n    await utilsApi.sendApiRequest(\n      apiConstants.HTTP_METHOD.GET,\n      apiConstants.COURSES_API_ROUTE.GET_CATEGORY,\n      null,\n      null,\n      null,\n      null,\n      successCallback,\n      failureCallback\n    );\n  } catch (error) {\n    if (failureCallback) {\n      failureCallback(error);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}