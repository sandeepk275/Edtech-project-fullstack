{"ast":null,"code":"// imports for utils\nimport { utilsApi, apiConstants } from \"./utils-api\"; // imports for utils\n\nimport * as utils from \"../utils\";\nvar token = utils.getFromLocalStorage(user);\n/**\n * Function to search for a course\n * @param {String} title - substring which needs to be searched in course title\n * @param {Function} successCallback - callback method to be called when API succeeds\n * @param {Function} failureCallback - callback method to be called when API fails\n * @returns {Array} array of courses whose title contains the given substring (each course is an object consisting of course details)\n */\n\nexport async function searchCourseByTitle(title, successCallback, failureCallback) {\n  try {\n    await utilsApi.sendApiRequest(apiConstants.HTTP_METHOD.GET, apiConstants.COURSES_API_ROUTE.TUTORIALSBYTITLE, [title], null, null, null, successCallback, failureCallback);\n  } catch (error) {\n    if (failureCallback) {\n      failureCallback(error);\n    }\n  }\n}\n/**\n * Function to get all courses within a given category\n * @param {String} category - category string corresponding to which courses are to be fetched\n * @param {Function} successCallback - callback method to be called when API succeeds\n * @param {Function} failureCallback - callback method to be called when API fails\n * @returns {Array} array of courses which belong to the given category (each course is an object consisting of course details)\n */\n\nexport async function getCoursesByCategory(category, successCallback, failureCallback) {\n  try {\n    await utilsApi.sendApiRequest(apiConstants.HTTP_METHOD.GET, apiConstants.COURSES_API_ROUTE.GET_CATEGORY, [category], null, null, null, successCallback, failureCallback);\n  } catch (error) {\n    if (failureCallback) {\n      failureCallback(error);\n    }\n  }\n}\n/**\n * Function to get all courses (published as well as non-published)\n * @param {Function} successCallback - callback method to be called when API succeeds\n * @param {Function} failureCallback - callback method to be called when API fails\n * @returns {Array} array of all courses in the database (each course is an object consisting of course details)\n */\n\nexport async function getAllCourses(successCallback, failureCallback) {\n  try {\n    await utilsApi.sendApiRequest(apiConstants.HTTP_METHOD.GET, apiConstants.COURSES_API_ROUTE.TUTORIALS, null, null, null, {\n      authorization\n    }, successCallback, failureCallback);\n  } catch (error) {\n    if (failureCallback) {\n      failureCallback(error);\n    }\n  }\n}\n/**\n * Function to get all published courses\n * @param {Function} successCallback - callback method to be called when API succeeds\n * @param {Function} failureCallback - callback method to be called when API fails\n * @returns {Array} array of all published courses in the database (each course is an object consisting of course details)\n */\n\nexport async function getAllPublishedCourses(successCallback, failureCallback) {\n  try {\n    await utilsApi.sendApiRequest(apiConstants.HTTP_METHOD.GET, apiConstants.COURSES_API_ROUTE.TUTORIALS, [apiConstants.COURSES_API_PATH_PARAMETER.PUBLISHED], null, null, null, successCallback, failureCallback);\n  } catch (error) {\n    if (failureCallback) {\n      failureCallback(error);\n    }\n  }\n}\n/**\n * Function to get course with given id\n * @param {*} courseId - id of the course to be fetched\n * @param {*} successCallback - callback method to be called when API succeeds\n * @param {*} failureCallback - callback method to be called when API fails\n * @returns {Object} course with given ID\n */\n\nexport async function getCourseById(courseId, successCallback, failureCallback) {\n  try {\n    await utilsApi.sendApiRequest(apiConstants.HTTP_METHOD.GET, apiConstants.COURSES_API_ROUTE.TUTORIALS, [courseId], null, null, null, successCallback, failureCallback);\n  } catch (error) {\n    if (failureCallback) {\n      failureCallback(error);\n    }\n  }\n}\n/**\n * Function to delete a course with given id\n * @param {*} courseId - id of the course to be deleted\n * @param {*} successCallback - callback method to be called when API succeeds\n * @param {*} failureCallback - callback method to be called when API fails\n */\n\nexport async function deleteCourse(courseId, successCallback, failureCallback) {\n  try {\n    await utilsApi.sendApiRequest(apiConstants.HTTP_METHOD.DELETE, apiConstants.COURSES_API_ROUTE.TUTORIALS, [courseId], null, null, null, successCallback, failureCallback);\n  } catch (error) {\n    if (failureCallback) {\n      failureCallback(error);\n    }\n  }\n}\nexport async function addCourse(courseData, successCallback, failureCallback) {\n  try {\n    await utilsApi.sendApiRequest(apiConstants.HTTP_METHOD.POST, apiConstants.COURSES_API_ROUTE.ADD_COURSE, null, null, courseData, null, successCallback, failureCallback);\n  } catch (error) {\n    if (failureCallback) {\n      failureCallback(error);\n    }\n  }\n}\nexport async function editCourse(courseId, courseData, successCallback, failureCallback) {\n  try {\n    await utilsApi.sendApiRequest(apiConstants.HTTP_METHOD.PUT, apiConstants.COURSES_API_ROUTE.TUTORIALS, [courseId], null, courseData, null, successCallback, failureCallback);\n  } catch (error) {\n    if (failureCallback) {\n      failureCallback(error);\n    }\n  }\n}\nexport async function getAllCategory(successCallback, failureCallback) {\n  try {\n    await utilsApi.sendApiRequest(apiConstants.HTTP_METHOD.GET, apiConstants.COURSES_API_ROUTE.GET_CATEGORY, null, null, null, null, successCallback, failureCallback);\n  } catch (error) {\n    if (failureCallback) {\n      failureCallback(error);\n    }\n  }\n}","map":{"version":3,"sources":["C:/Users/sandeep/Downloads/edtech-frontend-main/edtech-frontend-main/src/api/coursesApi.js"],"names":["utilsApi","apiConstants","utils","token","getFromLocalStorage","user","searchCourseByTitle","title","successCallback","failureCallback","sendApiRequest","HTTP_METHOD","GET","COURSES_API_ROUTE","TUTORIALSBYTITLE","error","getCoursesByCategory","category","GET_CATEGORY","getAllCourses","TUTORIALS","authorization","getAllPublishedCourses","COURSES_API_PATH_PARAMETER","PUBLISHED","getCourseById","courseId","deleteCourse","DELETE","addCourse","courseData","POST","ADD_COURSE","editCourse","PUT","getAllCategory"],"mappings":"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","sourcesContent":["// imports for utils\nimport { utilsApi, apiConstants } from \"./utils-api\";\n// imports for utils\nimport * as utils from \"../utils\";\n\nvar token=utils.getFromLocalStorage(user)\n\n/**\n * Function to search for a course\n * @param {String} title - substring which needs to be searched in course title\n * @param {Function} successCallback - callback method to be called when API succeeds\n * @param {Function} failureCallback - callback method to be called when API fails\n * @returns {Array} array of courses whose title contains the given substring (each course is an object consisting of course details)\n */\n\nexport async function searchCourseByTitle(\n  title,\n  successCallback,\n  failureCallback\n) {\n  try {\n    await utilsApi.sendApiRequest(\n      apiConstants.HTTP_METHOD.GET,\n      apiConstants.COURSES_API_ROUTE.TUTORIALSBYTITLE,\n      [title ],\n      null,\n      null,\n      null,\n      successCallback,\n      failureCallback\n    );\n  } catch (error) {\n    if (failureCallback) {\n      failureCallback(error);\n    }\n  }\n}\n\n/**\n * Function to get all courses within a given category\n * @param {String} category - category string corresponding to which courses are to be fetched\n * @param {Function} successCallback - callback method to be called when API succeeds\n * @param {Function} failureCallback - callback method to be called when API fails\n * @returns {Array} array of courses which belong to the given category (each course is an object consisting of course details)\n */\nexport async function getCoursesByCategory(\n  category,\n  successCallback,\n  failureCallback\n) {\n  try {\n    await utilsApi.sendApiRequest(\n      apiConstants.HTTP_METHOD.GET,\n      apiConstants.COURSES_API_ROUTE.GET_CATEGORY,\n      [category],\n      null,\n      null,\n      null,\n      successCallback,\n      failureCallback\n    );\n  } catch (error) {\n    if (failureCallback) {\n      failureCallback(error);\n    }\n  }\n}\n\n/**\n * Function to get all courses (published as well as non-published)\n * @param {Function} successCallback - callback method to be called when API succeeds\n * @param {Function} failureCallback - callback method to be called when API fails\n * @returns {Array} array of all courses in the database (each course is an object consisting of course details)\n */\nexport async function getAllCourses(successCallback, failureCallback) {\n  try {\n    await utilsApi.sendApiRequest(\n      apiConstants.HTTP_METHOD.GET,\n      apiConstants.COURSES_API_ROUTE.TUTORIALS,\n      null,\n      null,\n      null,\n      {authorization},\n      successCallback,\n      failureCallback\n    );\n  } catch (error) {\n    if (failureCallback) {\n      failureCallback(error);\n    }\n  }\n}\n\n/**\n * Function to get all published courses\n * @param {Function} successCallback - callback method to be called when API succeeds\n * @param {Function} failureCallback - callback method to be called when API fails\n * @returns {Array} array of all published courses in the database (each course is an object consisting of course details)\n */\nexport async function getAllPublishedCourses(successCallback, failureCallback) {\n  try {\n    await utilsApi.sendApiRequest(\n      apiConstants.HTTP_METHOD.GET,\n      apiConstants.COURSES_API_ROUTE.TUTORIALS,\n      [apiConstants.COURSES_API_PATH_PARAMETER.PUBLISHED],\n      null,\n      null,\n      null,\n      successCallback,\n      failureCallback\n    );\n  } catch (error) {\n    if (failureCallback) {\n      failureCallback(error);\n    }\n  }\n}\n\n/**\n * Function to get course with given id\n * @param {*} courseId - id of the course to be fetched\n * @param {*} successCallback - callback method to be called when API succeeds\n * @param {*} failureCallback - callback method to be called when API fails\n * @returns {Object} course with given ID\n */\nexport async function getCourseById(\n  courseId,\n  successCallback,\n  failureCallback\n) {\n  try {\n    await utilsApi.sendApiRequest(\n      apiConstants.HTTP_METHOD.GET,\n      apiConstants.COURSES_API_ROUTE.TUTORIALS,\n      [courseId],\n      null,\n      null,\n      null,\n      successCallback,\n      failureCallback\n    );\n  } catch (error) {\n    if (failureCallback) {\n      failureCallback(error);\n    }\n  }\n}\n\n/**\n * Function to delete a course with given id\n * @param {*} courseId - id of the course to be deleted\n * @param {*} successCallback - callback method to be called when API succeeds\n * @param {*} failureCallback - callback method to be called when API fails\n */\nexport async function deleteCourse(courseId, successCallback, failureCallback) {\n  try {\n    await utilsApi.sendApiRequest(\n      apiConstants.HTTP_METHOD.DELETE,\n      apiConstants.COURSES_API_ROUTE.TUTORIALS,\n      [courseId],\n      null,\n      null,\n      null,\n      successCallback,\n      failureCallback\n    );\n  } catch (error) {\n    if (failureCallback) {\n      failureCallback(error);\n    }\n  }\n}\n\nexport async function addCourse(courseData, successCallback, failureCallback) {\n  try {\n    await utilsApi.sendApiRequest(\n      apiConstants.HTTP_METHOD.POST,\n      apiConstants.COURSES_API_ROUTE.ADD_COURSE,\n      null,\n      null,\n      courseData,\n      null,\n      successCallback,\n      failureCallback\n    );\n  } catch (error) {\n    if (failureCallback) {\n      failureCallback(error);\n    }\n  }\n}\n\nexport async function editCourse(courseId, courseData, successCallback, failureCallback) {\n  try {\n    await utilsApi.sendApiRequest(\n      apiConstants.HTTP_METHOD.PUT,\n      apiConstants.COURSES_API_ROUTE.TUTORIALS,\n      [courseId],\n      null,\n      courseData,\n      null,\n      successCallback,\n      failureCallback\n    );\n  } catch (error) {\n    if (failureCallback) {\n      failureCallback(error);\n    }\n  }\n}\n\nexport async function getAllCategory(successCallback, failureCallback) {\n  try {\n    await utilsApi.sendApiRequest(\n      apiConstants.HTTP_METHOD.GET,\n      apiConstants.COURSES_API_ROUTE.GET_CATEGORY,\n      null,\n      null,\n      null,\n      null,\n      successCallback,\n      failureCallback\n    );\n  } catch (error) {\n    if (failureCallback) {\n      failureCallback(error);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}