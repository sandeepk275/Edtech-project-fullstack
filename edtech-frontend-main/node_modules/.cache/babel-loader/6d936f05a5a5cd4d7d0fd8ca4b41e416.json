{"ast":null,"code":"import * as utils from \"../../utils\";\n\nconst validateCourseForm = values => {\n  let errors = {};\n  /*\n   Rule 1: title is required\n   */\n\n  if (!values.title.trim()) {\n    errors.title = \"Required\";\n  }\n  /*\n   Rule 2: category is required\n   */\n\n\n  if (!values.category.trim()) {\n    errors.category = \"Required\";\n  }\n  /*\n   Rule 3: author is required\n   */\n\n\n  if (!values.author.trim()) {\n    errors.author = \"Required\";\n  }\n  /*\n   Rule 4: skills is required\n   */\n\n\n  if (!values.skills.trim()) {\n    errors.skills = \"Required\";\n  }\n  /*\n   Rule 5: chapters is required\n   */\n\n\n  if (!values.chapters.trim()) {\n    errors.chapters = \"Required\";\n  }\n  /*\n   Rule 6: priceInRupees is required\n   Rule 7: priceInRupees should be a numerical value (integer or decimal)\n   Rule 8: priceInRupees cannot be negative\n   */\n\n\n  if (!values.priceInRupees.trim()) {\n    errors.priceInRupees = \"Required\";\n  } else if (!utils.checkIfValueIsNumerical(values.priceInRupees)) {\n    errors.priceInRupees = \"Price should be numerical\";\n  } else if (values.priceInRupees < 0) {\n    errors.priceInRupees = \"Price cannot be negative\";\n  }\n  /*\n   Rule 9: priceAfterDiscount is required\n   Rule 10: priceAfterDiscount should be a numerical value (integer or decimal)\n   Rule 11: priceAfterDiscount cannot be negative\n   */\n\n\n  if (!values.priceAfterDiscount.trim()) {\n    errors.priceAfterDiscount = \"Required\";\n  } else if (!utils.checkIfValueIsNumerical(values.priceAfterDiscount)) {\n    errors.priceAfterDiscount = \"Price should be numerical\";\n  } else if (values.priceAfterDiscount < 0) {\n    errors.priceAfterDiscount = \"Price cannot be negative\";\n  }\n  /*\n   Rule 12: duration is required\n   Rule 13: duration should be an integer value\n   Rule 14: duration cannot be negative\n   */\n\n\n  if (!values.duration.trim()) {\n    errors.duration = \"Required\";\n  } else if (!utils.checkIfValueIsInteger(values.duration)) {\n    errors.duration = \"Duration should contain only digits\";\n  } else if (values.duration < 0) {\n    errors.duration = \"Duration cannot be negative\";\n  }\n  /*\n   Rule 15: popularity is required\n   Rule 16: popularity should be a numerical value (integer or decimal)\n   Rule 17: popularity cannot be negative\n   */\n\n\n  if (!values.popularity.trim()) {\n    errors.popularity = \"Required\";\n  } else if (!utils.checkIfValueIsNumerical(values.popularity)) {\n    errors.popularity = \"Popularity should be numerical\";\n  } else if (values.popularity < 0) {\n    errors.popularity = \"Popularity cannot be negative\";\n  }\n  /*\n   Rule 18: imageURL should be a valid URL, if provided\n   */\n\n\n  if (values.imageURL && !utils.checkIfValidUrl(values.imageURL)) {\n    errors.imageURL = \"Invalid image URL\";\n  }\n  /*\n   Rule 19: videoURL is required\n   Rule 20: videoURL should be a valid URL\n   */\n\n\n  if (!values.videoURL.trim()) {\n    errors.videoURL = \"Required\";\n  } else if (!utils.checkIfValidUrl(values.videoURL)) {\n    errors.videoURL = \"Invalid video URL\";\n  }\n\n  return errors;\n};\n\nexport default validateCourseForm;","map":{"version":3,"sources":["C:/Users/sandeep/Downloads/edtech-frontend-main/edtech-frontend-main/src/pages/admin/validateCourseForm.js"],"names":["utils","validateCourseForm","values","errors","title","trim","category","author","skills","chapters","priceInRupees","checkIfValueIsNumerical","priceAfterDiscount","duration","checkIfValueIsInteger","popularity","imageURL","checkIfValidUrl","videoURL"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,aAAvB;;AAEA,MAAMC,kBAAkB,GAAIC,MAAD,IAAY;AACrC,MAAIC,MAAM,GAAG,EAAb;AAEA;AACF;AACA;;AACE,MAAI,CAACD,MAAM,CAACE,KAAP,CAAaC,IAAb,EAAL,EAA0B;AACxBF,IAAAA,MAAM,CAACC,KAAP,GAAe,UAAf;AACD;AAED;AACF;AACA;;;AACE,MAAI,CAACF,MAAM,CAACI,QAAP,CAAgBD,IAAhB,EAAL,EAA6B;AAC3BF,IAAAA,MAAM,CAACG,QAAP,GAAkB,UAAlB;AACD;AAED;AACF;AACA;;;AACE,MAAI,CAACJ,MAAM,CAACK,MAAP,CAAcF,IAAd,EAAL,EAA2B;AACzBF,IAAAA,MAAM,CAACI,MAAP,GAAgB,UAAhB;AACD;AAED;AACF;AACA;;;AACE,MAAI,CAACL,MAAM,CAACM,MAAP,CAAcH,IAAd,EAAL,EAA2B;AACzBF,IAAAA,MAAM,CAACK,MAAP,GAAgB,UAAhB;AACD;AAED;AACF;AACA;;;AACE,MAAI,CAACN,MAAM,CAACO,QAAP,CAAgBJ,IAAhB,EAAL,EAA6B;AAC3BF,IAAAA,MAAM,CAACM,QAAP,GAAkB,UAAlB;AACD;AAED;AACF;AACA;AACA;AACA;;;AACE,MAAI,CAACP,MAAM,CAACQ,aAAP,CAAqBL,IAArB,EAAL,EAAkC;AAChCF,IAAAA,MAAM,CAACO,aAAP,GAAuB,UAAvB;AACD,GAFD,MAEO,IAAI,CAACV,KAAK,CAACW,uBAAN,CAA8BT,MAAM,CAACQ,aAArC,CAAL,EAA0D;AAC/DP,IAAAA,MAAM,CAACO,aAAP,GAAuB,2BAAvB;AACD,GAFM,MAEA,IAAIR,MAAM,CAACQ,aAAP,GAAuB,CAA3B,EAA8B;AACnCP,IAAAA,MAAM,CAACO,aAAP,GAAuB,0BAAvB;AACD;AAED;AACF;AACA;AACA;AACA;;;AACE,MAAI,CAACR,MAAM,CAACU,kBAAP,CAA0BP,IAA1B,EAAL,EAAuC;AACrCF,IAAAA,MAAM,CAACS,kBAAP,GAA4B,UAA5B;AACD,GAFD,MAEO,IAAI,CAACZ,KAAK,CAACW,uBAAN,CAA8BT,MAAM,CAACU,kBAArC,CAAL,EAA+D;AACpET,IAAAA,MAAM,CAACS,kBAAP,GAA4B,2BAA5B;AACD,GAFM,MAEA,IAAIV,MAAM,CAACU,kBAAP,GAA4B,CAAhC,EAAmC;AACxCT,IAAAA,MAAM,CAACS,kBAAP,GAA4B,0BAA5B;AACD;AAED;AACF;AACA;AACA;AACA;;;AACE,MAAI,CAACV,MAAM,CAACW,QAAP,CAAgBR,IAAhB,EAAL,EAA6B;AAC3BF,IAAAA,MAAM,CAACU,QAAP,GAAkB,UAAlB;AACD,GAFD,MAEO,IAAI,CAACb,KAAK,CAACc,qBAAN,CAA4BZ,MAAM,CAACW,QAAnC,CAAL,EAAmD;AACxDV,IAAAA,MAAM,CAACU,QAAP,GAAkB,qCAAlB;AACD,GAFM,MAEA,IAAIX,MAAM,CAACW,QAAP,GAAkB,CAAtB,EAAyB;AAC9BV,IAAAA,MAAM,CAACU,QAAP,GAAkB,6BAAlB;AACD;AAED;AACF;AACA;AACA;AACA;;;AACE,MAAI,CAACX,MAAM,CAACa,UAAP,CAAkBV,IAAlB,EAAL,EAA+B;AAC7BF,IAAAA,MAAM,CAACY,UAAP,GAAoB,UAApB;AACD,GAFD,MAEO,IAAI,CAACf,KAAK,CAACW,uBAAN,CAA8BT,MAAM,CAACa,UAArC,CAAL,EAAuD;AAC5DZ,IAAAA,MAAM,CAACY,UAAP,GAAoB,gCAApB;AACD,GAFM,MAEA,IAAIb,MAAM,CAACa,UAAP,GAAoB,CAAxB,EAA2B;AAChCZ,IAAAA,MAAM,CAACY,UAAP,GAAoB,+BAApB;AACD;AAED;AACF;AACA;;;AACE,MAAIb,MAAM,CAACc,QAAP,IAAmB,CAAChB,KAAK,CAACiB,eAAN,CAAsBf,MAAM,CAACc,QAA7B,CAAxB,EAAgE;AAC9Db,IAAAA,MAAM,CAACa,QAAP,GAAkB,mBAAlB;AACD;AAED;AACF;AACA;AACA;;;AACE,MAAI,CAACd,MAAM,CAACgB,QAAP,CAAgBb,IAAhB,EAAL,EAA6B;AAC3BF,IAAAA,MAAM,CAACe,QAAP,GAAkB,UAAlB;AACD,GAFD,MAEO,IAAI,CAAClB,KAAK,CAACiB,eAAN,CAAsBf,MAAM,CAACgB,QAA7B,CAAL,EAA6C;AAClDf,IAAAA,MAAM,CAACe,QAAP,GAAkB,mBAAlB;AACD;;AAED,SAAOf,MAAP;AACD,CA5GD;;AA8GA,eAAeF,kBAAf","sourcesContent":["import * as utils from \"../../utils\";\n\nconst validateCourseForm = (values) => {\n  let errors = {};\n\n  /*\n   Rule 1: title is required\n   */\n  if (!values.title.trim()) {\n    errors.title = \"Required\";\n  }\n\n  /*\n   Rule 2: category is required\n   */\n  if (!values.category.trim()) {\n    errors.category = \"Required\";\n  }\n\n  /*\n   Rule 3: author is required\n   */\n  if (!values.author.trim()) {\n    errors.author = \"Required\";\n  }\n\n  /*\n   Rule 4: skills is required\n   */\n  if (!values.skills.trim()) {\n    errors.skills = \"Required\";\n  }\n\n  /*\n   Rule 5: chapters is required\n   */\n  if (!values.chapters.trim()) {\n    errors.chapters = \"Required\";\n  }\n\n  /*\n   Rule 6: priceInRupees is required\n   Rule 7: priceInRupees should be a numerical value (integer or decimal)\n   Rule 8: priceInRupees cannot be negative\n   */\n  if (!values.priceInRupees.trim()) {\n    errors.priceInRupees = \"Required\";\n  } else if (!utils.checkIfValueIsNumerical(values.priceInRupees)) {\n    errors.priceInRupees = \"Price should be numerical\";\n  } else if (values.priceInRupees < 0) {\n    errors.priceInRupees = \"Price cannot be negative\";\n  }\n\n  /*\n   Rule 9: priceAfterDiscount is required\n   Rule 10: priceAfterDiscount should be a numerical value (integer or decimal)\n   Rule 11: priceAfterDiscount cannot be negative\n   */\n  if (!values.priceAfterDiscount.trim()) {\n    errors.priceAfterDiscount = \"Required\";\n  } else if (!utils.checkIfValueIsNumerical(values.priceAfterDiscount)) {\n    errors.priceAfterDiscount = \"Price should be numerical\";\n  } else if (values.priceAfterDiscount < 0) {\n    errors.priceAfterDiscount = \"Price cannot be negative\";\n  }\n\n  /*\n   Rule 12: duration is required\n   Rule 13: duration should be an integer value\n   Rule 14: duration cannot be negative\n   */\n  if (!values.duration.trim()) {\n    errors.duration = \"Required\";\n  } else if (!utils.checkIfValueIsInteger(values.duration)) {\n    errors.duration = \"Duration should contain only digits\";\n  } else if (values.duration < 0) {\n    errors.duration = \"Duration cannot be negative\";\n  }\n\n  /*\n   Rule 15: popularity is required\n   Rule 16: popularity should be a numerical value (integer or decimal)\n   Rule 17: popularity cannot be negative\n   */\n  if (!values.popularity.trim()) {\n    errors.popularity = \"Required\";\n  } else if (!utils.checkIfValueIsNumerical(values.popularity)) {\n    errors.popularity = \"Popularity should be numerical\";\n  } else if (values.popularity < 0) {\n    errors.popularity = \"Popularity cannot be negative\";\n  }\n\n  /*\n   Rule 18: imageURL should be a valid URL, if provided\n   */\n  if (values.imageURL && !utils.checkIfValidUrl(values.imageURL)) {\n    errors.imageURL = \"Invalid image URL\";\n  }\n\n  /*\n   Rule 19: videoURL is required\n   Rule 20: videoURL should be a valid URL\n   */\n  if (!values.videoURL.trim()) {\n    errors.videoURL = \"Required\";\n  } else if (!utils.checkIfValidUrl(values.videoURL)) {\n    errors.videoURL = \"Invalid video URL\";\n  }\n\n  return errors;\n};\n\nexport default validateCourseForm;\n"]},"metadata":{},"sourceType":"module"}