{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sandeep\\\\Downloads\\\\edtech-frontend-main\\\\edtech-frontend-main\\\\src\\\\pages\\\\onboard\\\\forms\\\\LoginForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\"; // imports for 3rd party libraries\n\nimport PropTypes from \"prop-types\"; // imports for components from MUI library\n\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport FilledInput from \"@material-ui/core/FilledInput\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Visibility from \"@material-ui/icons/Visibility\";\nimport VisibilityOff from \"@material-ui/icons/VisibilityOff\";\nimport Button from \"@material-ui/core/Button\"; // imports for custom hook\n\nimport { useForm } from \"../../../hooks\";\nimport validateLoginForm from \"./validateLoginForm\"; // imports for styles\n\nimport { useStyles } from \"../../../styles/formStyles.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LoginForm = ({\n  successHandler,\n  isLoginSuccessful\n}) => {\n  _s();\n\n  const initialFormValues = {\n    // the keys are similar to `name` attribute provided to form controls\n    email: \"\",\n    password: \"\"\n  };\n  const {\n    values,\n    errors,\n    handleChange,\n    handleSubmit\n  } = useForm(initialFormValues, validateLoginForm, successHandler, isLoginSuccessful // determining if values of form control should be cleared\n  );\n  const {\n    email,\n    password\n  } = values;\n  const [showPassword, setShowPassword] = useState(false);\n  const classes = useStyles();\n\n  const handleShowPasswordChange = () => {\n    setShowPassword(!showPassword);\n  };\n\n  const handleShowPasswordMouseDown = event => {\n    event.preventDefault();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    id: \"loginForm\",\n    noValidate: true,\n    autoComplete: \"off\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.formControlsContainer,\n      children: [/*#__PURE__*/_jsxDEV(FormControl, {\n        variant: \"filled\",\n        children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n          htmlFor: \"loginEmail\",\n          color: \"secondary\",\n          children: \"Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FilledInput, {\n          id: \"loginEmail\",\n          name: \"email\",\n          type: \"email\",\n          value: email,\n          onChange: handleChange,\n          autoComplete: \"on\",\n          color: \"secondary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this), errors.email && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.error,\n          children: errors.email\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 28\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n        variant: \"filled\",\n        children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n          htmlFor: \"loginPassword\",\n          color: \"secondary\",\n          children: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FilledInput, {\n          id: \"loginPassword\",\n          name: \"password\",\n          type: showPassword ? \"text\" : \"password\",\n          value: password,\n          onChange: handleChange,\n          autoComplete: \"on\",\n          color: \"secondary\",\n          endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n            position: \"end\",\n            children: /*#__PURE__*/_jsxDEV(IconButton, {\n              \"aria-label\": \"toggle password visibility\",\n              onClick: handleShowPasswordChange,\n              onMouseDown: handleShowPasswordMouseDown,\n              edge: \"end\",\n              children: showPassword ? /*#__PURE__*/_jsxDEV(Visibility, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 88,\n                columnNumber: 35\n              }, this) : /*#__PURE__*/_jsxDEV(VisibilityOff, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 88,\n                columnNumber: 52\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this), errors.password && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.error,\n          children: errors.password\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      color: \"secondary\",\n      fullWidth: true,\n      size: \"large\",\n      className: classes.formButton,\n      onClick: handleSubmit,\n      children: \"log me in\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n\n_s(LoginForm, \"DzzlnXKqJ/Ho2pD0zWvbGvscPdE=\", false, function () {\n  return [useForm, useStyles];\n});\n\n_c = LoginForm;\nLoginForm.propTypes = {\n  successHandler: PropTypes.func.isRequired,\n  isLoginSuccessful: PropTypes.bool.isRequired\n};\nexport default LoginForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginForm\");","map":{"version":3,"sources":["C:/Users/sandeep/Downloads/edtech-frontend-main/edtech-frontend-main/src/pages/onboard/forms/LoginForm.js"],"names":["React","useState","PropTypes","FormControl","InputLabel","FilledInput","InputAdornment","IconButton","Visibility","VisibilityOff","Button","useForm","validateLoginForm","useStyles","LoginForm","successHandler","isLoginSuccessful","initialFormValues","email","password","values","errors","handleChange","handleSubmit","showPassword","setShowPassword","classes","handleShowPasswordChange","handleShowPasswordMouseDown","event","preventDefault","formControlsContainer","error","formButton","propTypes","func","isRequired","bool"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\n\n// imports for 3rd party libraries\nimport PropTypes from \"prop-types\";\n\n// imports for components from MUI library\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport FilledInput from \"@material-ui/core/FilledInput\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Visibility from \"@material-ui/icons/Visibility\";\nimport VisibilityOff from \"@material-ui/icons/VisibilityOff\";\nimport Button from \"@material-ui/core/Button\";\n\n// imports for custom hook\nimport { useForm } from \"../../../hooks\";\nimport validateLoginForm from \"./validateLoginForm\";\n\n// imports for styles\nimport { useStyles } from \"../../../styles/formStyles.js\";\n\nconst LoginForm = ({ successHandler, isLoginSuccessful }) => {\n  const initialFormValues = {\n    // the keys are similar to `name` attribute provided to form controls\n    email: \"\",\n    password: \"\",\n  };\n\n  const { values, errors, handleChange, handleSubmit } = useForm(\n    initialFormValues,\n    validateLoginForm,\n    successHandler,\n    isLoginSuccessful // determining if values of form control should be cleared\n  );\n  const { email, password } = values;\n\n  const [showPassword, setShowPassword] = useState(false);\n\n  const classes = useStyles();\n\n  const handleShowPasswordChange = () => {\n    setShowPassword(!showPassword);\n  };\n\n  const handleShowPasswordMouseDown = (event) => {\n    event.preventDefault();\n  };\n\n  return (\n    <form id=\"loginForm\" noValidate autoComplete=\"off\">\n      <div className={classes.formControlsContainer}>\n        <FormControl variant=\"filled\">\n          <InputLabel htmlFor=\"loginEmail\" color=\"secondary\">\n            Email\n          </InputLabel>\n          <FilledInput\n            id=\"loginEmail\"\n            name=\"email\"\n            type=\"email\"\n            value={email}\n            onChange={handleChange}\n            autoComplete=\"on\"\n            color=\"secondary\"\n          />\n          {errors.email && <div className={classes.error}>{errors.email}</div>}\n        </FormControl>\n        <FormControl variant=\"filled\">\n          <InputLabel htmlFor=\"loginPassword\" color=\"secondary\">\n            Password\n          </InputLabel>\n          <FilledInput\n            id=\"loginPassword\"\n            name=\"password\"\n            type={showPassword ? \"text\" : \"password\"}\n            value={password}\n            onChange={handleChange}\n            autoComplete=\"on\"\n            color=\"secondary\"\n            endAdornment={\n              <InputAdornment position=\"end\">\n                <IconButton\n                  aria-label=\"toggle password visibility\"\n                  onClick={handleShowPasswordChange}\n                  onMouseDown={handleShowPasswordMouseDown}\n                  edge=\"end\"\n                >\n                  {showPassword ? <Visibility /> : <VisibilityOff />}\n                </IconButton>\n              </InputAdornment>\n            }\n          />\n          {errors.password && (\n            <div className={classes.error}>{errors.password}</div>\n          )}\n        </FormControl>\n      </div>\n\n      <Button\n        variant=\"contained\"\n        color=\"secondary\"\n        fullWidth={true}\n        size=\"large\"\n        className={classes.formButton}\n        onClick={handleSubmit}\n      >\n        log me in\n      </Button>\n    </form>\n  );\n};\n\nLoginForm.propTypes = {\n  successHandler: PropTypes.func.isRequired,\n  isLoginSuccessful: PropTypes.bool.isRequired,\n};\n\nexport default LoginForm;\n"]},"metadata":{},"sourceType":"module"}