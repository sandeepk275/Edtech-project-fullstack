{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\n\nconst useForm = (valuesInitialState, // initial state of form values\nvalidate, // function to validate form values\nsuccessCallback, // callback to be executed when all values of form control are valid (a.k.a. validation is successful)\nshouldSetValuesToInitialState // whether form values should be set to initial state\n) => {\n  _s();\n\n  // form values entered on UI\n  const [values, setValues] = useState(valuesInitialState); // form errors based on values entered on UI\n\n  const [errors, setErrors] = useState({}); // avoids invoking callback function when the errors object is empty on first page load\n\n  const [isSubmitting, setIsSubmitting] = useState(false); // Event handler detecting change in any form control\n\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target; // key in state object = `name` attribute of form control\n\n    setValues({ ...values,\n      [name]: value\n    });\n  }; // Event handler detecting click of Submit button inside form\n\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    setErrors(validate(values));\n    setIsSubmitting(true);\n  }; // clears form values\n\n\n  useEffect(() => {\n    shouldSetValuesToInitialState && setValues(valuesInitialState);\n  }, [shouldSetValuesToInitialState]);\n  useEffect(() => {\n    // if the submit button is clicked atleast once and there's no error, invoke success callback\n    if (isSubmitting && Object.keys(errors).length === 0 && successCallback) {\n      successCallback(values);\n    }\n  }, [errors]);\n  return {\n    values,\n    errors,\n    handleChange,\n    handleSubmit\n  };\n};\n\n_s(useForm, \"FPvLeDLaNMAVTJWTo3H/xm1LbWk=\");\n\nexport default useForm;","map":{"version":3,"sources":["C:/Users/sandeep/Desktop/edtech project/edtech-frontend-main/src/hooks/useForm.js"],"names":["useState","useEffect","useForm","valuesInitialState","validate","successCallback","shouldSetValuesToInitialState","values","setValues","errors","setErrors","isSubmitting","setIsSubmitting","handleChange","e","name","value","target","handleSubmit","preventDefault","Object","keys","length"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,OAAO,GAAG,CACdC,kBADc,EACM;AACpBC,QAFc,EAEJ;AACVC,eAHc,EAGG;AACjBC,6BAJc,CAIgB;AAJhB,KAKX;AAAA;;AACH;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAACG,kBAAD,CAApC,CAFG,CAGH;;AACA,QAAM,CAACM,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,EAAD,CAApC,CAJG,CAMH;;AACA,QAAM,CAACW,YAAD,EAAeC,eAAf,IAAkCZ,QAAQ,CAAC,KAAD,CAAhD,CAPG,CASH;;AACA,QAAMa,YAAY,GAAIC,CAAD,IAAO;AAC1B,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkBF,CAAC,CAACG,MAA1B,CAD0B,CAE1B;;AACAT,IAAAA,SAAS,CAAC,EAAE,GAAGD,MAAL;AAAa,OAACQ,IAAD,GAAQC;AAArB,KAAD,CAAT;AACD,GAJD,CAVG,CAgBH;;;AACA,QAAME,YAAY,GAAIJ,CAAD,IAAO;AAC1BA,IAAAA,CAAC,CAACK,cAAF;AAEAT,IAAAA,SAAS,CAACN,QAAQ,CAACG,MAAD,CAAT,CAAT;AACAK,IAAAA,eAAe,CAAC,IAAD,CAAf;AACD,GALD,CAjBG,CAwBH;;;AACAX,EAAAA,SAAS,CAAC,MAAM;AACdK,IAAAA,6BAA6B,IAAIE,SAAS,CAACL,kBAAD,CAA1C;AACD,GAFQ,EAEN,CAACG,6BAAD,CAFM,CAAT;AAIAL,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,QAAIU,YAAY,IAAIS,MAAM,CAACC,IAAP,CAAYZ,MAAZ,EAAoBa,MAApB,KAA+B,CAA/C,IAAoDjB,eAAxD,EAAyE;AACvEA,MAAAA,eAAe,CAACE,MAAD,CAAf;AACD;AACF,GALQ,EAKN,CAACE,MAAD,CALM,CAAT;AAOA,SAAO;AAAEF,IAAAA,MAAF;AAAUE,IAAAA,MAAV;AAAkBI,IAAAA,YAAlB;AAAgCK,IAAAA;AAAhC,GAAP;AACD,CA1CD;;GAAMhB,O;;AA4CN,eAAeA,OAAf","sourcesContent":["import { useState, useEffect } from \"react\";\n\nconst useForm = (\n  valuesInitialState, // initial state of form values\n  validate, // function to validate form values\n  successCallback, // callback to be executed when all values of form control are valid (a.k.a. validation is successful)\n  shouldSetValuesToInitialState // whether form values should be set to initial state\n) => {\n  // form values entered on UI\n  const [values, setValues] = useState(valuesInitialState);\n  // form errors based on values entered on UI\n  const [errors, setErrors] = useState({});\n\n  // avoids invoking callback function when the errors object is empty on first page load\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  // Event handler detecting change in any form control\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    // key in state object = `name` attribute of form control\n    setValues({ ...values, [name]: value });\n  };\n\n  // Event handler detecting click of Submit button inside form\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    setErrors(validate(values));\n    setIsSubmitting(true);\n  };\n\n  // clears form values\n  useEffect(() => {\n    shouldSetValuesToInitialState && setValues(valuesInitialState);\n  }, [shouldSetValuesToInitialState]);\n\n  useEffect(() => {\n    // if the submit button is clicked atleast once and there's no error, invoke success callback\n    if (isSubmitting && Object.keys(errors).length === 0 && successCallback) {\n      successCallback(values);\n    }\n  }, [errors]);\n\n  return { values, errors, handleChange, handleSubmit };\n};\n\nexport default useForm;\n"]},"metadata":{},"sourceType":"module"}