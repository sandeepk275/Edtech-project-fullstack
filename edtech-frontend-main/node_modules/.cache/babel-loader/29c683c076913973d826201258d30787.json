{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sandeep\\\\Desktop\\\\edtech project\\\\edtech-frontend-main\\\\src\\\\contexts\\\\auth\\\\AuthContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { createContext, useState, useContext } from \"react\"; // imports for 3rd party libraries\n\nimport { useHistory } from \"react-router-dom\"; // imports for routes\n\nimport * as routeConstants from \"../../routes/routeConstants\"; // imports for utils\n\nimport * as utils from \"../../utils\"; // imports for constants\n\nimport * as authConstants from \"./authConstants\"; // imports for API methods\n\nimport * as userApi from \"../../api/userApi\"; // imports for custom hooks\n\nimport useLoader from \"../../hooks/useLoader\";\nimport useNotification from \"../../hooks/useNotification\";\nimport useTabs from \"../../hooks/useTabs\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n\n  const history = useHistory();\n  const {\n    showLoader,\n    hideLoader\n  } = useLoader();\n  const {\n    notification,\n    showNotification\n  } = useNotification();\n  const {\n    tabValue,\n    handleTabChange\n  } = useTabs();\n  const [currentUser, setCurrentUser] = useState(null); // Variable to check whether a user is logged in either from state or from local storage\n\n  const isLoggedIn = currentUser || utils.getFromLocalStorage(utils.constants.LOCAL_STORAGE_KEY.USER) ? true : false; // Function to get details of logged-in user either from state or from local storage\n\n  const getLoggedInUserDetails = () => {\n    return currentUser || utils.getFromLocalStorage(utils.constants.LOCAL_STORAGE_KEY.USER);\n  }; // Function to get the role of logged-in user\n\n\n  const getLoggedInUserRole = () => {\n    return getLoggedInUserDetails().role;\n  }; // Function to call login API and pass success and failure callbacks to it\n\n\n  const login = ({\n    email,\n    password\n  }) => {\n    showLoader();\n    userApi.doLogin({\n      email: email,\n      password: password\n    }, // success callback\n    response => {\n      setCurrentUser(response.data); // set logged-in user's details in local storage\n\n      utils.setInLocalStorage(utils.constants.LOCAL_STORAGE_KEY.USER, response.data);\n      hideLoader(); // show the success message inside Snackbar component\n\n      showNotification(\"Logged in successfully!\"); // redirect to home page on successful login of user\n\n      if (getLoggedInUserRole() === authConstants.ROLE.USER) {\n        history.push(routeConstants.ROUTE_URL.HOME);\n      } // redirect to list page on successful login of admin\n\n\n      if (getLoggedInUserRole() === authConstants.ROLE.ADMIN) {\n        history.push(routeConstants.ROUTE_URL.COURSES_LIST);\n      }\n    }, // failure callback\n    (error, errorMessage) => {\n      // show errors from specific to generic\n      if (errorMessage) {\n        showNotification(errorMessage);\n      } else {\n        showNotification(error.toString());\n      }\n\n      hideLoader();\n    });\n  }; // Function to call signup API and pass success and failure callbacks to it\n\n\n  const signup = values => {\n    showLoader();\n    userApi.doSignup(values, // success callback\n    response => {\n      handleTabChange(null, 0); // redirect to login tab when signup is successful\n\n      hideLoader(); // show the success message inside Snackbar component\n\n      showNotification(\"Signed up successfully! Please login.\");\n    }, // failure callback\n    (error, errorMessage) => {\n      // show errors from specific to generic\n      if (errorMessage) {\n        showNotification(errorMessage);\n      } else {\n        showNotification(error.toString());\n      }\n\n      hideLoader();\n    });\n  }; // Function to call logout API and pass success and failure callbacks to it\n\n\n  const logout = () => {\n    showLoader();\n    userApi.doLogout(getLoggedInUserDetails()._id, // success callback\n    response => {\n      setCurrentUser(null); // clear all details of logged-in user inside local storage\n\n      utils.clearLocalStorage();\n      hideLoader(); // show the success message inside Snackbar component\n\n      showNotification(\"Logged out successfully!\");\n      history.push(routeConstants.ROUTE_URL.ONBOARD); // redirect to onboard page on successful logout\n    }, // failure callback\n    (error, errorMessage) => {\n      // show errors from specific to generic\n      if (errorMessage) {\n        showNotification(errorMessage);\n      } else {\n        showNotification(error.toString());\n      }\n\n      hideLoader();\n    });\n  };\n\n  const authValues = {\n    login,\n    signup,\n    logout,\n    isLoggedIn,\n    getLoggedInUserDetails,\n    tabValue,\n    handleTabChange\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: authValues,\n    children: [children, \" \", notification]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 163,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthProvider, \"6JmervYG+ThYenKZHqaxSMWLGkI=\", false, function () {\n  return [useHistory, useLoader, useNotification, useTabs];\n});\n\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n\n  return useContext(AuthContext);\n};\n\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["C:/Users/sandeep/Desktop/edtech project/edtech-frontend-main/src/contexts/auth/AuthContext.js"],"names":["React","createContext","useState","useContext","useHistory","routeConstants","utils","authConstants","userApi","useLoader","useNotification","useTabs","AuthContext","AuthProvider","children","history","showLoader","hideLoader","notification","showNotification","tabValue","handleTabChange","currentUser","setCurrentUser","isLoggedIn","getFromLocalStorage","constants","LOCAL_STORAGE_KEY","USER","getLoggedInUserDetails","getLoggedInUserRole","role","login","email","password","doLogin","response","data","setInLocalStorage","ROLE","push","ROUTE_URL","HOME","ADMIN","COURSES_LIST","error","errorMessage","toString","signup","values","doSignup","logout","doLogout","_id","clearLocalStorage","ONBOARD","authValues","useAuth"],"mappings":"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","sourcesContent":["import React, { createContext, useState, useContext } from \"react\";\n\n// imports for 3rd party libraries\nimport { useHistory } from \"react-router-dom\";\n\n// imports for routes\nimport * as routeConstants from \"../../routes/routeConstants\";\n\n// imports for utils\nimport * as utils from \"../../utils\";\n\n// imports for constants\nimport * as authConstants from \"./authConstants\";\n\n// imports for API methods\nimport * as userApi from \"../../api/userApi\";\n\n// imports for custom hooks\nimport useLoader from \"../../hooks/useLoader\";\nimport useNotification from \"../../hooks/useNotification\";\nimport useTabs from \"../../hooks/useTabs\";\n\nconst AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const history = useHistory();\n  const { showLoader, hideLoader } = useLoader();\n  const { notification, showNotification } = useNotification();\n  const { tabValue, handleTabChange } = useTabs();\n\n  const [currentUser, setCurrentUser] = useState(null);\n\n  // Variable to check whether a user is logged in either from state or from local storage\n  const isLoggedIn =\n    currentUser ||\n    utils.getFromLocalStorage(utils.constants.LOCAL_STORAGE_KEY.USER)\n      ? true\n      : false;\n\n  // Function to get details of logged-in user either from state or from local storage\n  const getLoggedInUserDetails = () => {\n    return (\n      currentUser ||\n      utils.getFromLocalStorage(utils.constants.LOCAL_STORAGE_KEY.USER)\n    );\n  };\n\n  // Function to get the role of logged-in user\n  const getLoggedInUserRole = () => {\n    return getLoggedInUserDetails().role;\n  };\n\n  // Function to call login API and pass success and failure callbacks to it\n  const login = ({ email, password }) => {\n    showLoader();\n    userApi.doLogin(\n      { email: email, password: password },\n      // success callback\n      (response) => {\n        setCurrentUser(response.data);\n\n        // set logged-in user's details in local storage\n        utils.setInLocalStorage(\n          utils.constants.LOCAL_STORAGE_KEY.USER,\n          response.data\n        );\n\n        hideLoader();\n\n        // show the success message inside Snackbar component\n        showNotification(\"Logged in successfully!\");\n\n        // redirect to home page on successful login of user\n        if (getLoggedInUserRole() === authConstants.ROLE.USER) {\n          history.push(routeConstants.ROUTE_URL.HOME);\n        }\n\n        // redirect to list page on successful login of admin\n        if (getLoggedInUserRole() === authConstants.ROLE.ADMIN) {\n          history.push(routeConstants.ROUTE_URL.COURSES_LIST);\n        }\n      },\n      // failure callback\n      (error, errorMessage) => {\n        // show errors from specific to generic\n        if (errorMessage) {\n          showNotification(errorMessage);\n        } else {\n          showNotification(error.toString());\n        }\n        hideLoader();\n      }\n    );\n  };\n\n  // Function to call signup API and pass success and failure callbacks to it\n  const signup = (values) => {\n    showLoader();\n    userApi.doSignup(\n      values,\n      // success callback\n      (response) => {\n        handleTabChange(null, 0); // redirect to login tab when signup is successful\n        hideLoader();\n\n        // show the success message inside Snackbar component\n        showNotification(\"Signed up successfully! Please login.\");\n      },\n      // failure callback\n      (error, errorMessage) => {\n        // show errors from specific to generic\n        if (errorMessage) {\n          showNotification(errorMessage);\n        } else {\n          showNotification(error.toString());\n        }\n        hideLoader();\n      }\n    );\n  };\n\n  // Function to call logout API and pass success and failure callbacks to it\n  const logout = () => {\n    showLoader();\n    userApi.doLogout(\n      getLoggedInUserDetails()._id,\n      // success callback\n      (response) => {\n        setCurrentUser(null);\n\n        // clear all details of logged-in user inside local storage\n        utils.clearLocalStorage();\n\n        hideLoader();\n        // show the success message inside Snackbar component\n        showNotification(\"Logged out successfully!\");\n        history.push(routeConstants.ROUTE_URL.ONBOARD); // redirect to onboard page on successful logout\n      },\n      // failure callback\n      (error, errorMessage) => {\n        // show errors from specific to generic\n        if (errorMessage) {\n          showNotification(errorMessage);\n        } else {\n          showNotification(error.toString());\n        }\n        hideLoader();\n      }\n    );\n  };\n\n  const authValues = {\n    login,\n    signup,\n    logout,\n    isLoggedIn,\n    getLoggedInUserDetails,\n    tabValue,\n    handleTabChange,\n  };\n\n  return (\n    <AuthContext.Provider value={authValues}>\n      {children} {notification}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => {\n  return useContext(AuthContext);\n};\n"]},"metadata":{},"sourceType":"module"}