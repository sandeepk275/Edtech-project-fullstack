{"ast":null,"code":"import axios from \"../axiosConfig\";\n/**\n * Function to build string from path parameters\n * @param {Array} pathParameters - array consisting of ordered path parameters\n * @returns substring of URL formed from path parameters\n */\n\nconst buildUrlWithPathParameters = pathParameters => {\n  if (pathParameters && pathParameters.length !== 0) {\n    let pathParametersString = \"\";\n\n    for (let i = 0; i < pathParameters.length; i++) {\n      pathParametersString += `/${pathParameters[i]}`;\n    }\n\n    return pathParametersString;\n  } else {\n    return \"\";\n  }\n};\n/**\n * Function to build string from URL parameters\n * @param {Object} urlParameters - object containing the key-value pairs of the URL parameters\n * @returns {String} URI-encoded substring of URL formed from URL parameters\n */\n\n\nconst buildUrlWithUrlParameters = urlParameters => {\n  if (!urlParameters) {\n    return \"\";\n  } else {\n    let urlParametersString = \"\";\n\n    for (let key in urlParameters) {\n      if (urlParametersString) {\n        urlParametersString += \"&\";\n      }\n\n      urlParametersString += key + \"=\" + encodeURIComponent(urlParameters[key]);\n    }\n\n    urlParametersString = \"?\" + urlParametersString;\n    return urlParametersString;\n  }\n};\n/**\n * Function to send an API request via Axios\n * @param {String} requestMethod - HTTP method\n * @param {String} requestUrl - URL to send request to\n * @param {Array} pathParameters - path parameters to be attached to request URL\n * @param {Object} urlParameters - URL parameters to be attached to request URL\n * @param {Object} requestDataBody - Data to be sent as body along with request\n * @param {Object} requestHeaders - Request headers to be sent along with request\n * @param {Function} successCallback - callback function to be invoked if the request succeeds\n * @param {Function} failureCallback - callback function to be invoked if the request fails\n */\n\n\nexport const sendApiRequest = async (requestMethod, requestUrl, // /login\npathParameters, urlParameters, requestDataBody, requestHeaders, successCallback, failureCallback) => {\n  const url = requestUrl + buildUrlWithPathParameters(pathParameters) + buildUrlWithUrlParameters(urlParameters);\n\n  try {\n    const response = await axios({\n      method: requestMethod,\n      url: url,\n      data: requestDataBody,\n      headers: requestHeaders\n    });\n\n    if (response && response.statusText === \"OK\") {\n      if (successCallback) {\n        successCallback(response);\n      }\n    }\n  } catch (error) {\n    // control comes here when a request was made and the server responded with a status code that falls out of the range of 2xx\n    if (failureCallback) {\n      if (error && error.request && error.request.responseText) {\n        const errorMessage = JSON.parse(error.request.responseText).message;\n        failureCallback(error, errorMessage);\n      } else {\n        failureCallback(error);\n      }\n\n      return;\n    }\n\n    throw error;\n  }\n};","map":{"version":3,"sources":["C:/Users/sandeep/Downloads/edtech-frontend-main/edtech-frontend-main/src/api/utils-api/utilsApi.js"],"names":["axios","buildUrlWithPathParameters","pathParameters","length","pathParametersString","i","buildUrlWithUrlParameters","urlParameters","urlParametersString","key","encodeURIComponent","sendApiRequest","requestMethod","requestUrl","requestDataBody","requestHeaders","successCallback","failureCallback","url","response","method","data","headers","statusText","error","request","responseText","errorMessage","JSON","parse","message"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,gBAAlB;AAEA;AACA;AACA;AACA;AACA;;AACA,MAAMC,0BAA0B,GAAIC,cAAD,IAAoB;AACrD,MAAIA,cAAc,IAAIA,cAAc,CAACC,MAAf,KAA0B,CAAhD,EAAmD;AACjD,QAAIC,oBAAoB,GAAG,EAA3B;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,cAAc,CAACC,MAAnC,EAA2CE,CAAC,EAA5C,EAAgD;AAC9CD,MAAAA,oBAAoB,IAAK,IAAGF,cAAc,CAACG,CAAD,CAAI,EAA9C;AACD;;AACD,WAAOD,oBAAP;AACD,GAND,MAMO;AACL,WAAO,EAAP;AACD;AACF,CAVD;AAYA;AACA;AACA;AACA;AACA;;;AACA,MAAME,yBAAyB,GAAIC,aAAD,IAAmB;AACnD,MAAI,CAACA,aAAL,EAAoB;AAClB,WAAO,EAAP;AACD,GAFD,MAEO;AACL,QAAIC,mBAAmB,GAAG,EAA1B;;AACA,SAAK,IAAIC,GAAT,IAAgBF,aAAhB,EAA+B;AAC7B,UAAIC,mBAAJ,EAAyB;AACvBA,QAAAA,mBAAmB,IAAI,GAAvB;AACD;;AACDA,MAAAA,mBAAmB,IAAIC,GAAG,GAAG,GAAN,GAAYC,kBAAkB,CAACH,aAAa,CAACE,GAAD,CAAd,CAArD;AACD;;AACDD,IAAAA,mBAAmB,GAAG,MAAMA,mBAA5B;AACA,WAAOA,mBAAP;AACD;AACF,CAdD;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,MAAMG,cAAc,GAAG,OAC5BC,aAD4B,EAE5BC,UAF4B,EAEjB;AACXX,cAH4B,EAI5BK,aAJ4B,EAK5BO,eAL4B,EAM5BC,cAN4B,EAO5BC,eAP4B,EAQ5BC,eAR4B,KASzB;AACH,QAAMC,GAAG,GACPL,UAAU,GACVZ,0BAA0B,CAACC,cAAD,CAD1B,GAEAI,yBAAyB,CAACC,aAAD,CAH3B;;AAIA,MAAI;AACF,UAAMY,QAAQ,GAAG,MAAMnB,KAAK,CAAC;AAC3BoB,MAAAA,MAAM,EAAER,aADmB;AAE3BM,MAAAA,GAAG,EAAEA,GAFsB;AAG3BG,MAAAA,IAAI,EAAEP,eAHqB;AAI3BQ,MAAAA,OAAO,EAAEP;AAJkB,KAAD,CAA5B;;AAMA,QAAII,QAAQ,IAAIA,QAAQ,CAACI,UAAT,KAAwB,IAAxC,EAA8C;AAC5C,UAAIP,eAAJ,EAAqB;AACnBA,QAAAA,eAAe,CAACG,QAAD,CAAf;AACD;AACF;AACF,GAZD,CAYE,OAAOK,KAAP,EAAc;AACd;AACA,QAAIP,eAAJ,EAAqB;AACnB,UAAIO,KAAK,IAAIA,KAAK,CAACC,OAAf,IAA0BD,KAAK,CAACC,OAAN,CAAcC,YAA5C,EAA0D;AACxD,cAAMC,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWL,KAAK,CAACC,OAAN,CAAcC,YAAzB,EAAuCI,OAA5D;AACAb,QAAAA,eAAe,CAACO,KAAD,EAAQG,YAAR,CAAf;AACD,OAHD,MAGO;AACLV,QAAAA,eAAe,CAACO,KAAD,CAAf;AACD;;AACD;AACD;;AACD,UAAMA,KAAN;AACD;AACF,CAvCM","sourcesContent":["import axios from \"../axiosConfig\";\n\n/**\n * Function to build string from path parameters\n * @param {Array} pathParameters - array consisting of ordered path parameters\n * @returns substring of URL formed from path parameters\n */\nconst buildUrlWithPathParameters = (pathParameters) => {\n  if (pathParameters && pathParameters.length !== 0) {\n    let pathParametersString = \"\";\n    for (let i = 0; i < pathParameters.length; i++) {\n      pathParametersString += `/${pathParameters[i]}`;\n    }\n    return pathParametersString;\n  } else {\n    return \"\";\n  }\n};\n\n/**\n * Function to build string from URL parameters\n * @param {Object} urlParameters - object containing the key-value pairs of the URL parameters\n * @returns {String} URI-encoded substring of URL formed from URL parameters\n */\nconst buildUrlWithUrlParameters = (urlParameters) => {\n  if (!urlParameters) {\n    return \"\";\n  } else {\n    let urlParametersString = \"\";\n    for (let key in urlParameters) {\n      if (urlParametersString) {\n        urlParametersString += \"&\";\n      }\n      urlParametersString += key + \"=\" + encodeURIComponent(urlParameters[key]);\n    }\n    urlParametersString = \"?\" + urlParametersString;\n    return urlParametersString;\n  }\n};\n\n/**\n * Function to send an API request via Axios\n * @param {String} requestMethod - HTTP method\n * @param {String} requestUrl - URL to send request to\n * @param {Array} pathParameters - path parameters to be attached to request URL\n * @param {Object} urlParameters - URL parameters to be attached to request URL\n * @param {Object} requestDataBody - Data to be sent as body along with request\n * @param {Object} requestHeaders - Request headers to be sent along with request\n * @param {Function} successCallback - callback function to be invoked if the request succeeds\n * @param {Function} failureCallback - callback function to be invoked if the request fails\n */\nexport const sendApiRequest = async (\n  requestMethod,\n  requestUrl,// /login\n  pathParameters,\n  urlParameters,\n  requestDataBody,\n  requestHeaders,\n  successCallback,\n  failureCallback\n) => {\n  const url =\n    requestUrl +\n    buildUrlWithPathParameters(pathParameters) +\n    buildUrlWithUrlParameters(urlParameters);\n  try {\n    const response = await axios({\n      method: requestMethod,\n      url: url,\n      data: requestDataBody,\n      headers: requestHeaders,\n    });\n    if (response && response.statusText === \"OK\") {\n      if (successCallback) {\n        successCallback(response);\n      }\n    }\n  } catch (error) {\n    // control comes here when a request was made and the server responded with a status code that falls out of the range of 2xx\n    if (failureCallback) {\n      if (error && error.request && error.request.responseText) {\n        const errorMessage = JSON.parse(error.request.responseText).message;\n        failureCallback(error, errorMessage);\n      } else {\n        failureCallback(error);\n      }\n      return;\n    }\n    throw error;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}