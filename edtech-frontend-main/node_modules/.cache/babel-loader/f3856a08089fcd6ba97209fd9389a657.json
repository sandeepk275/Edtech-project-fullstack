{"ast":null,"code":"/**\n * Function to check if datatype of a given value is of reference type\n * @param {*} value - value to be checked\n * @returns {Boolean} - true if the given value is reference type; false otherwise\n */\nconst checkReferenceType = value => {\n  if (value) {\n    return typeof value === \"object\" || typeof value === \"function\";\n  }\n\n  return false;\n};\n/**\n * Function to get formatted date as: April 20, 2021 from an ISO date string\n * @param {String} isoDate - ISO date string to be formatted\n * @returns {String} - formatted date string\n */\n\n\nexport const getFormattedDate = isoDate => {\n  if (isoDate) {\n    const options = {\n      day: \"numeric\",\n      month: \"long\",\n      year: \"numeric\"\n    };\n    return new Date(isoDate).toLocaleDateString(\"en-US\", options);\n  }\n\n  return \"\";\n};\n/**\n * Function to check if given email is valid\n * @param {String} email - email to be checked\n * @returns {Boolean} - true if email is valid; false otherwise\n */\n\nexport const checkValidEmail = email => {\n  if (email) {\n    // Credits - https://stackoverflow.com/a/46181/7452548\n    const regex = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return regex.test(email.toString().toLowerCase());\n  }\n\n  return false;\n};\n/**\n * Function to check if given value contains only integer numbers\n * @param {String} value - value to be checked\n * @returns {Boolean} - true if value is integer number; false otherwise\n */\n\nexport const checkIfValueIsInteger = value => {\n  if (value) {\n    const regex = /^[0-9]*$/;\n    return regex.test(value.toString());\n  }\n\n  return false;\n};\n/**\n * Function to check if given value contains only numbers (integers or decimals)\n * @param {String} value - value to be checked\n * @returns {Boolean} - true if value is numerical (integer or decimal); false otherwise\n */\n\nexport const checkIfValueIsNumerical = value => {\n  if (value) {\n    return !isNaN(value.toString());\n  }\n\n  return false;\n};\n/**\n * Function to check if given string is a valid URL\n * @param {String} str - string to be checked\n * @returns {Boolean} - true if given string is a valid URL; false otherwise\n * CREDITS - https://stackoverflow.com/a/3809435/7452548\n */\n\nexport const checkIfValidUrl = str => {\n  if (str) {\n    const regex = /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&//=]*)/;\n    return regex.test(str.toString());\n  }\n\n  return false;\n};\n/**\n * Function to get value of given key from local storage\n * @param {*} key - unique identifier (datatype is not reference type)\n * @returns {*} JSON-parsed value corresponding to given key\n */\n\nexport const getFromLocalStorage = key => {\n  return JSON.parse(localStorage.getItem(key.toString()));\n};\n/**\n * Function to set local storage with given key-value pair\n * @param {*} key - unique identifier (datatype is not reference type)\n * @param {*} value - value corresponding to the key\n */\n\nexport const setInLocalStorage = (key, value) => {\n  if (!checkReferenceType(key) && value) {\n    if (checkReferenceType(value)) {\n      localStorage.setItem(key.toString(), JSON.stringify(value));\n    } else {\n      localStorage.setItem(key.toString(), value.toString());\n    }\n  }\n};\n/**\n * Function to clear all keys from local storage\n */\n\nexport const clearLocalStorage = () => {\n  localStorage.clear();\n};\n/**\n * Function to get formatted time represented in hours and minutes\n * @param {number} minutes - unique identifier (datatype is not reference type)\n * @returns {String} formatted time if minutes exist; \"NA\" otherwise\n *    Example: 2h 30m\n */\n\nexport const getFormattedTimeInHoursAndMinutes = minutes => {\n  if (minutes) {\n    minutes = +minutes; // convert string to number (type safe for further calculations)\n\n    const hours = Math.floor(minutes / 60);\n    const mins = minutes % 60;\n\n    if (hours === 0) {\n      return `${mins}m`;\n    }\n\n    if (mins === 0) {\n      return `${hours}h`;\n    }\n\n    return `${hours}h ${mins}m`;\n  }\n\n  return \"NA\";\n};","map":{"version":3,"sources":["C:/Users/sandeep/Downloads/edtech-frontend-main/edtech-frontend-main/src/utils/utils.js"],"names":["checkReferenceType","value","getFormattedDate","isoDate","options","day","month","year","Date","toLocaleDateString","checkValidEmail","email","regex","test","toString","toLowerCase","checkIfValueIsInteger","checkIfValueIsNumerical","isNaN","checkIfValidUrl","str","getFromLocalStorage","key","JSON","parse","localStorage","getItem","setInLocalStorage","setItem","stringify","clearLocalStorage","clear","getFormattedTimeInHoursAndMinutes","minutes","hours","Math","floor","mins"],"mappings":"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","sourcesContent":["/**\n * Function to check if datatype of a given value is of reference type\n * @param {*} value - value to be checked\n * @returns {Boolean} - true if the given value is reference type; false otherwise\n */\nconst checkReferenceType = (value) => {\n  if (value) {\n    return typeof value === \"object\" || typeof value === \"function\";\n  }\n  return false;\n};\n\n/**\n * Function to get formatted date as: April 20, 2021 from an ISO date string\n * @param {String} isoDate - ISO date string to be formatted\n * @returns {String} - formatted date string\n */\nexport const getFormattedDate = (isoDate) => {\n  if (isoDate) {\n    const options = {\n      day: \"numeric\",\n      month: \"long\",\n      year: \"numeric\",\n    };\n    return new Date(isoDate).toLocaleDateString(\"en-US\", options);\n  }\n  return \"\";\n};\n\n/**\n * Function to check if given email is valid\n * @param {String} email - email to be checked\n * @returns {Boolean} - true if email is valid; false otherwise\n */\nexport const checkValidEmail = (email) => {\n  if (email) {\n    // Credits - https://stackoverflow.com/a/46181/7452548\n    const regex = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n    return regex.test(email.toString().toLowerCase());\n  }\n  return false;\n};\n\n/**\n * Function to check if given value contains only integer numbers\n * @param {String} value - value to be checked\n * @returns {Boolean} - true if value is integer number; false otherwise\n */\nexport const checkIfValueIsInteger = (value) => {\n  if (value) {\n    const regex = /^[0-9]*$/;\n    return regex.test(value.toString());\n  }\n  return false;\n};\n\n/**\n * Function to check if given value contains only numbers (integers or decimals)\n * @param {String} value - value to be checked\n * @returns {Boolean} - true if value is numerical (integer or decimal); false otherwise\n */\nexport const checkIfValueIsNumerical = (value) => {\n  if (value) {\n    return !isNaN(value.toString());\n  }\n  return false;\n};\n\n/**\n * Function to check if given string is a valid URL\n * @param {String} str - string to be checked\n * @returns {Boolean} - true if given string is a valid URL; false otherwise\n * CREDITS - https://stackoverflow.com/a/3809435/7452548\n */\nexport const checkIfValidUrl = (str) => {\n  if (str) {\n    const regex = /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&//=]*)/;\n    return regex.test(str.toString());\n  }\n  return false;\n};\n\n/**\n * Function to get value of given key from local storage\n * @param {*} key - unique identifier (datatype is not reference type)\n * @returns {*} JSON-parsed value corresponding to given key\n */\nexport const getFromLocalStorage = (key) => {\n  return JSON.parse(localStorage.getItem(key.toString()));\n};\n\n/**\n * Function to set local storage with given key-value pair\n * @param {*} key - unique identifier (datatype is not reference type)\n * @param {*} value - value corresponding to the key\n */\nexport const setInLocalStorage = (key, value) => {\n  if (!checkReferenceType(key) && value) {\n    if (checkReferenceType(value)) {\n      localStorage.setItem(key.toString(), JSON.stringify(value));\n    } else {\n      localStorage.setItem(key.toString(), value.toString());\n    }\n  }\n};\n\n/**\n * Function to clear all keys from local storage\n */\nexport const clearLocalStorage = () => {\n  localStorage.clear();\n};\n\n/**\n * Function to get formatted time represented in hours and minutes\n * @param {number} minutes - unique identifier (datatype is not reference type)\n * @returns {String} formatted time if minutes exist; \"NA\" otherwise\n *    Example: 2h 30m\n */\nexport const getFormattedTimeInHoursAndMinutes = (minutes) => {\n  if (minutes) {\n    minutes = +minutes; // convert string to number (type safe for further calculations)\n    const hours = Math.floor(minutes / 60);\n    const mins = minutes % 60;\n    if (hours === 0) {\n      return `${mins}m`;\n    }\n    if (mins === 0) {\n      return `${hours}h`;\n    }\n    return `${hours}h ${mins}m`;\n  }\n  return \"NA\";\n};\n"]},"metadata":{},"sourceType":"module"}